ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 14,
fontFamily = 'Verdana',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 1,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 14,
fontFamily = 'Calibri',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 1,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 14,
fontFamily = 'Courier Next',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 1,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 14,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 1,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 0.8,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 1.2,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 1.5,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 0,
animate = TRUE,           # Load Animation: Funnel will animate on load.
# animation = list(duration = 800), # Control animation speed/duration.
curve = curve_setting,
# Click Event: On clicking a segment, execute custom JS code.
onItemClick = htmlwidgets::JS("
function(data, index) {
console.log('Clicked on segment:', data[0], data[1]);
alert('You clicked on ' + data[0] + ' with value ' + data[1]);
}
")
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 0.2,
curve = curve_setting
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 0.5,
curve = curve_setting
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 3,
curve = curve_setting
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 4,
curve = curve_setting
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
options <- list(
chart = list(
width = setting_size$width,
height = setting_size$height,
bottomPinch = 0,
curve = curve_setting
),
block = list(
dynamicHeight = dynamicsize_setting,     # Dynamic Height: Block heights proportional to values.
highlight     = highlight_setting,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient',      # Gradient: Blocks will have gradient fills.
# Custom Color: You can provide an array or scale for coloring.
# If a scale is needed, consider passing a D3 scale function via JS,
# or just rely on the library’s defaults.
scale = c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1'),
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
mywidget(data, options = options)
p <- mywidget(data, options = options)
p
data <- data.frame(a = c('Vist','Order','Paid', 'Shipped', 'Delivered'),
b = c(116634,2007,435, 200, 100))
label_format <- htmlwidgets::JS("
function(label, value) {
return label + ': ' + value + ' hits';
}
") #How the text lables should be formatted
colors_scale <- c('#c30010', '#f01e2c', '#ee6b6e', '#f69697', '#ffcbd1')
options <- list(
chart = list(
width = 400,
height = 600,
bottomPinch = 0.5, #at which level of the funnel should the pinch be visualized,
curve = list(enabled = TRUE, height = 20)
),
block = list(
dynamicHeight = FALSE,     # Dynamic Height: Block heights proportional to values.
highlight     = TRUE,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient', #or 'solid'     # Gradient: Blocks will have gradient fills.
scale = colors_scale,
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
p <- mywidget(data, options = options)
p
saveWidget(p, file=paste0("vignette_funnel.html"))
options <- list(
chart = list(
width = NULL,
height = NULL,
bottomPinch = 0.5, #at which level of the funnel should the pinch be visualized,
curve = list(enabled = TRUE, height = 20)
),
block = list(
dynamicHeight = FALSE,     # Dynamic Height: Block heights proportional to values.
highlight     = TRUE,         # Highlight on Hover: Change appearance on hover.
fill = list(
type = 'gradient', #or 'solid'     # Gradient: Blocks will have gradient fills.
scale = colors_scale,
ratio = 0.5             # Adjust ratio of gradient between colors.
)
),
label = list(
fontSize = 12,
fontFamily = 'Arial',
fill = '#333333',         # Style Labels: Font color and size.
# Formatting labels: Append units or modify text as desired.
format = label_format
)
)
p <- mywidget(data, options = options)
p
saveWidget(p, file=paste0("vignette_funnel.html"))
